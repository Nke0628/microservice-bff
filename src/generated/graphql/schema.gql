# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Department {
  id: String!
  name: String!
}

type MulritTerm {
  businessTermEndDate: String!
  businessTermName: String!
  businessTermStartDate: String!
  id: String!
  isCurrentTerm: Boolean!
  multiTermEndDate: String!
  multiTermStartDate: String!
}

type MultiEvaluation {
  goodComment: String!
  id: ID!
  improvementComment: String!
  multiTermId: String!
  score: Float!
  targetUser: User!
  targetUserId: Float!
  user: User!
  userId: Float!
}

type MultiEvaluationQuery {
  createdAt: String!
  goodComment: String!
  id: ID!
  improvementComment: String!
  multiTermId: Int!
  score: Int!
  targetUser: User!
  targetUserId: Int!
  updatedAt: String!
  user: User!
  userId: Int!
}

type Mutation {
  saveReportSetting(input: SaveReportSettingInput!): ReportSetting!
  submitMultiEvaluation(input: SubmitMultiEvaluationInput!): MultiEvaluation!
}

type Query {
  fetchDepartmentByIds(ids: [String!]!): [Department!]!
  fetchUsersByIds(ids: [Float!]!, userTypeSample: [UserType!]!): [User!]!
  findMultiEvaluationById(id: Float!): MultiEvaluationQuery
  multiTerms(orederBy: Boolean!, take: Float!): [MulritTerm!]!
  myEvaluatingMultiEvaluations(termId: Float!): [MultiEvaluation!]!
  reportSetting(termId: Float!): ReportSetting!
  searchMyEvaluatingMultiEvaluations(skip: Float!, take: Float!): SearchMultiEvaluation!
}

type ReportSetting {
  reportSettingDetails: [ReportSettingDetail!]!
  reportSettingId: ID!
  saveUser: User!
  saveUserId: Float!
  savedAt: String!
}

type ReportSettingDetail {
  charaNum: Float
  inputFlg: Boolean!
  positionLayerName: String!
  positionLayerType: Float!
  reportSettingDetailId: ID!
  theme: String!
}

input SaveReportSettingDetailInput {
  charaNum: Float
  inputFlg: Boolean!
  positionLayerType: Float!
  theme: String!
}

input SaveReportSettingInput {
  reportSettingDetail: [SaveReportSettingDetailInput!]!
  termId: Float!
}

type SearchMultiEvaluation {
  multiEvaluation: [MultiEvaluation!]!
  totalCount: Float!
}

input SubmitMultiEvaluationInput {
  goodComment: String!
  improvementComment: String!
  multiTermId: Float!
  score: Float!
  targetUserId: Float!
  userId: Float!
}

type User {
  department: Department
  departmentId: String!
  id: ID!
  name: String!
  userType: UserType!
}

enum UserType {
  EMPLOYEE
  PARTNER
}